package main

import (
	"bufio"
	"encoding/xml"
	"fmt"
	_"time"
	"io/ioutil"
	"log"
	"net/http"
	"bytes"
	_"github.com/lib/pq"
    "database/sql"
	"os"
)
const (
	host     = "localhost"
	port     = 5432
	user     = "postgres"
	password = "postgres"
	dbname   = "writeup"
	webhook = "YourWebHookURL"
)
var (
    WarningLogger *log.Logger
    InfoLogger    *log.Logger
    ErrorLogger   *log.Logger
)


type Rss struct {
	XMLName xml.Name  `xml:"rss"`
	Channel []Channel `xml:"channel"`
}
type Channel struct {
	XMLName xml.Name `xml:"channel"`
	Items   []Items  `xml:"item"`
}
type Items struct {
	XMLName xml.Name `xml:"item"`
	Title   string   `xml:"title"`
	Link    string   `xml:"guid"`
	PubDate string   `xml:"pubDate"`
}

func CheckError(err error) {
    if err != nil {
		ErrorLogger.Println(err)
    }
}

func ReadSource() []string {
	file, err := os.Open("./sources.txt")
	CheckError(err)
	defer file.Close()

	scanner := bufio.NewScanner(file)
	mySlice := []string{}
	for scanner.Scan() {
		mySlice = append(mySlice, scanner.Text())
	}
	return mySlice
}
	

func GetWriteUps(WeblogURL string) [][]string {
	//InfoLogger.Println("Start Load Writeups.")

	resp, err := http.Get(WeblogURL)
	CheckError(err)
	defer resp.Body.Close()
	byteValue, err := ioutil.ReadAll(resp.Body)
	CheckError(err)

	// Read XML Response 
	var rss Rss
	xml.Unmarshal(byteValue, &rss)

	Writeup := [][]string{}
	for i := 0; i < len(rss.Channel[0].Items); i++ {
		title := rss.Channel[0].Items[i].Title
		link := rss.Channel[0].Items[i].Link
		pub_date := rss.Channel[0].Items[i].PubDate
		Writeup = append(Writeup, []string{title, link, pub_date})
		// fmt.Println(Writeup)
	}
	// Writeup = append(Writeup, rss.Channel[0].Items[i].Title)
	// Writeup = append(Writeup, rss.Channel[0].Items[i].Link)
	// Writeup = append(Writeup, rss.Channel[0].Items[i].PubDate)
	return Writeup
}


func CheckPost(Writeups [][]string ) int {

	// Database
	psqlconn := fmt.Sprintf("host=%s port=%d user=%s password=%s dbname=%s sslmode=disable",host, port, user, password, dbname)
	
	db, err := sql.Open("postgres", psqlconn)
	CheckError(err)
	defer db.Close()
	err = db.Ping()
	CheckError(err)
	// fmt.Println("Successfully connected!")


	// Check Posts Table Exist Or Not.
	CreateQuery := `
	CREATE TABLE IF NOT EXISTS "Posts"
	(
	id bigint NOT NULL GENERATED BY DEFAULT AS IDENTITY ( INCREMENT 1 START 1 MINVALUE 1 MAXVALUE 9223372036854775807 CACHE 1 ),
	"Tittle" text  NOT NULL,
	"Link" text NOT NULL,
	"PubDate" text ,
	CONSTRAINT posts_pkey PRIMARY KEY (id)
	)`
	_, err= db.Exec(CreateQuery)
	CheckError(err)

	var result int
	for i:=0; i<len(Writeups); i++ {
		title := Writeups[i][0]
		link := Writeups[i][1]
		pub_date := Writeups[i][2]

		SelectQuery := `SELECT * FROM "Posts" WHERE "Tittle"=$1 OR "Link"=$2`
		rows, err := db.Query(SelectQuery, title, link)
		CheckError(err)
		if !rows.Next() {
			InsertQuery := `insert into "Posts"("Tittle", "Link", "PubDate") values($1, $2, $3)`
			_, err = db.Query(InsertQuery, title, link, pub_date)
			CheckError(err)
			InfoLogger.Println("Added To Database: ",title)
			DiscordServer(title, link, pub_date)
			
			result = result + 1
			// return result
		} 
	}
	return result
}



func DiscordServer(title string, link string, pub_date string)  {

	rawJSON := []byte(`{
		"content": "[%s](%s)",
		"embeds": null
		}`)

    json := fmt.Sprintf(string(rawJSON), title, link)
	req, err := http.NewRequest("POST", webhook, bytes.NewBuffer([]byte(json)))
	CheckError(err)
	req.Header.Add("Content-Type", "application/json")

	client := &http.Client{}
	res, err := client.Do(req)
	CheckError(err)
	InfoLogger.Println("Added To Discord: ",title)
	defer res.Body.Close()
}




func logger() {
    file, err := os.OpenFile("info.log", os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0666)
	CheckError(err)

    InfoLogger = log.New(file, "INFO: ", log.Ldate|log.Ltime|log.Lshortfile)
    WarningLogger = log.New(file, "WARNING: ", log.Ldate|log.Ltime|log.Lshortfile)
    ErrorLogger = log.New(file, "ERROR: ", log.Ldate|log.Ltime|log.Lshortfile)
}

func main() {
	// Start Logger Function
	logger()
	// InfoLogger.Println("Starting the application...")
    // InfoLogger.Println("Something noteworthy happened")
    // WarningLogger.Println("There is something you should know about")
    // ErrorLogger.Println("Something went wrong")



	// Read Resources File
	SourcesList := ReadSource()

	for i := 0; i < len(SourcesList); i++ {
		WeblogURL := SourcesList[i]
		InfoLogger.Println("Check :", SourcesList[i])
		Writeups := GetWriteUps(WeblogURL)
		result := CheckPost(Writeups)
		if result!=0 {
			InfoLogger.Println(result,"New Writeup.")
		}
	}
	InfoLogger.Println("Not New Writeups Available.")
}